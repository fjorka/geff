{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geff!","text":"<p>geff is a specification for a file format for exchanging spatial graph data. It is not intended to be mutable, editable, chunked, or optimized for use in an application setting.</p> <p>geff is the specification of the file format, but the library also includes implementations for writing from and reading to Python in-memory graph data structures: networkx and spatial_graph. The library uses semantic versioning, where changes to the specification bump the major or minor versions, and bugfixes for the example implementations bump the patch version.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install geff\n</code></pre> <p>To use geff with the <code>spatial-graph</code> backend</p> <pre><code>pip install geff[spatial-graph]\n</code></pre>"},{"location":"reference/geff/","title":"geff","text":""},{"location":"reference/geff/#geff","title":"geff","text":"<p>Modules:</p> <ul> <li> <code>metadata_schema</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul>"},{"location":"reference/geff/metadata_schema/","title":"geff.metadata_schema","text":""},{"location":"reference/geff/metadata_schema/#geff.metadata_schema","title":"geff.metadata_schema","text":"<p>Classes:</p> <ul> <li> <code>GeffMetadata</code>           \u2013            <p>Geff metadata schema to validate the attributes json file in a geff zarr</p> </li> </ul>"},{"location":"reference/geff/metadata_schema/#geff.metadata_schema.GeffMetadata","title":"GeffMetadata","text":"<p>               Bases: <code>BaseModel</code></p> <p>Geff metadata schema to validate the attributes json file in a geff zarr</p>"},{"location":"reference/geff/networkx/","title":"geff.networkx","text":""},{"location":"reference/geff/networkx/#geff.networkx","title":"geff.networkx","text":""},{"location":"reference/geff/spatial_graph/","title":"geff.spatial_graph","text":""},{"location":"reference/geff/spatial_graph/#geff.spatial_graph","title":"geff.spatial_graph","text":""},{"location":"reference/geff/spatial_graph/io/","title":"geff.spatial_graph.io","text":""},{"location":"reference/geff/spatial_graph/io/#geff.spatial_graph.io","title":"geff.spatial_graph.io","text":""},{"location":"reference/geff/utils/","title":"geff.utils","text":""},{"location":"reference/geff/utils/#geff.utils","title":"geff.utils","text":"<p>Functions:</p> <ul> <li> <code>validate</code>             \u2013              <p>Check that the structure of the zarr conforms to geff specification</p> </li> </ul>"},{"location":"reference/geff/utils/#geff.utils.validate","title":"validate","text":"<pre><code>validate(path: str)\n</code></pre> <p>Check that the structure of the zarr conforms to geff specification</p> <p>Parameters:</p> Source code in <code>src/geff/utils.py</code> <pre><code>def validate(path: str):\n    \"\"\"Check that the structure of the zarr conforms to geff specification\n\n    Args:\n        path (str): Path to geff zarr\n    \"\"\"\n    # Check that directory exists\n    assert os.path.exists(path), f\"Directory {path} does not exist\"\n\n    z = zarr.open(path, mode=\"r\")\n\n    assert \"graph\" in z, \"geff zarr must contain a graph group\"\n    graph = z[\"graph\"]\n\n    # graph attrs validation\n    # Raises pydantic.ValidationError or ValueError\n    GeffMetadata(**graph.attrs)\n\n    assert \"nodes\" in graph, \"graph group must contain a nodes group\"\n    nodes = graph[\"nodes\"]\n\n    # ids and attrs/position are required and should be same length\n    assert \"ids\" in nodes, \"nodes group must contain an ids array\"\n    assert \"attrs/position\" in nodes, \"nodes group must contain an attrs/position array\"\n\n    # Attribute array length should match id length\n    for attr in nodes[\"attrs\"].keys():\n        attr_len = nodes[\"attrs\"][attr].shape[0]\n        id_len = nodes[\"ids\"].shape[0]\n        assert (\n            attr_len == id_len\n        ), f\"Node attribute {attr} has length {attr_len}, which does not match id length {id_len}\"\n\n    assert \"edges\" in graph, \"graph group must contain an edge group\"\n    edges = graph[\"edges\"]\n\n    # Edges only require ids which contain nodes for each edge\n    assert \"ids\" in edges, \"edge group must contain ids array\"\n    id_shape = edges[\"ids\"].shape\n    assert (\n        id_shape[-1] == 2\n    ), f\"edges ids must have a last dimension of size 2, received shape {id_shape}\"\n</code></pre>"},{"location":"reference/geff/utils/#geff.utils.validate(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Path to geff zarr</p>"}]}